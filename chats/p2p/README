// UTF-8.ru_RU, 0a

Многопользовательский чат типа точка-точка.

---- Словарь.
Клиент = собеседник.
Сервер = справочник адресов собеседников.
Справочник адресов собеседников = набор строк, содержащих название собеседника,
                                  IP-адрес, порт.

---- Организация.
--- Сервер.
Сервер выступает в роли не более, чем справочника адресов собеседников,
раздавая его всем подключившимся и поддерживая его актуальность у клиентов
при необходимости - подключении нового клиента, отключении клиента.
Отключение клиента будет определено позже.
Сервер использует два канала данных. Первый - для установления соединения с
клиентом и его регистрации в чате. Второй - для оповещение сервера о прекращении
или продолжении связи со стороны клиента и ожидания клиентами поправок к
справочнику.
Первый канал - TCP.
Второй канал - UDP.
Порты каналов совпадают.
Подтверждение о продолжении связи сервер ожидает от каждого клиента 1 раз в
ping_interval секунд. При отсутствии очередного подтверждения клиент считается
отключившимся.
Между запусками справочник хранится в БД SQLite 3.x

-- Структура записей в БД.
Таблица clients:
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    nickname CHAR(16),
    host TEXT,
    port TEXT,
    UNIQUE(nickname)

--- Клиент.
Клиент при запуске подключается к серверу, представляется, получает
справочник собеседников, сообщает о намерении продолжать беседу с кем-нибудь
и разрывает соединение. После этого, используется второй канал данных.
В том числе и для подтверждения того, что клиент все еще на связи.
Далее, клиент устанавливает TCP-соединение с другим клиентом. Представляется и
получает ответ об установке соединения.

Подключение клиента к серверу = установка TCP-соединение, представление.
Представление = сообщение серверу своих реквизитов (название в чате),
                получение кодового слова.
Разрыв соединения = прекращение TCP-соединения.
Отключение клиента от сервера = соответствующее оповещение сервера клиентом.
После перехода связи с сервером на второй канал, первый используется для
общения с остальными клиентами.

--- Подробности.
Ключевые слова:
    nickname - название клиента в чате - 16 знаков (латиница, цифры, подчерк).
               Недостающие знаки заполняются байтами 00. Последний байт
               всегда будет установлен в 00.
    keyword - кодовое слово, выделяемое сервером клиенту - 40 байтов.
    ip - адрес собеседника.
    port - порт собеседника.
    cl_cnt - кол-во собеседников.
    len - длина сообщения в байтах.
    (a)/k - повторение группы 'a' 'k' раз через пробел
            (в соответствии с контекстом).

Сообщения, управляющие и диалоговые, передаются пакетами.
Пакет состоит из заголовка и тела.
Заголовок (длина = 0c байтов):
Смещение (hex) - Длина (hex) - Тип    - Значение
00             - 05          - string - Подпись = p2pmu
05             - 01          - byte   - код команды
06             - 02          - ushort - длина сообщения в байтах (len),
                                        без учета заголовка
08             - 02          - ushort - CRC CCITT заголовка
0a             - 02          - ushort - CRC CCITT тела

Допустимые команды:
Код команды (hex) - Команда
00                - CONNECT
01                - REFERENCE
02                - CHANNEL_SWITCH
03                - REF_ADD
04                - REF_DEL
05                - QUIT
06                - PING
07                - ACCEPT
08                - MESSAGE

Команда ACCEPT реализует также и команду REJECT:
Смещение (hex) - Длина (hex) - Тип    - Значение
00             - 01          - byte   - код:
                                        0 - сообщение принято
                                        - - сообщение не принято

Что передается (направление = [к-с = клиент-сервер,
                               с-к = сервер-клиент,
                               к-к = клиент-клиент])

-- Первый канал:
Представление (к-с):
CONNECT nickname

Пересылка справочника (с-к):
REFERENCE cl_cnt (nickname ip port)/cl_cnt

Намерение продолжать беседу (смена канала с первого на второй) (к-с):
CHANNEL_SWITCH

Порядок сообщений:
    1. CONNECT - REFERENCE - CHANNEL_SWITCH
    2. CONNECT - REJECT (если такой nickname уже занят)

-- Второй канал:
Добавленые строки в справочнике (с-к):
REF_ADD keyword nickname ip port

Убраная строка в справочнике (c-к):
REF_DEL keyword nickname

Отключение (к-с):
QUIT nickname

Подтверждение наличия клиента на связи (к-с)
PING nickname

Порядок сообщений:
    REF_ADD - REF_DEL ...
    PING - ACCEPT
    PING - REJECT (если клиент уже считается отключившимся)

-- Запись из справочника (nickname ip port) имеет вид:
Смещение (hex) - Длина (hex) - Тип    - Значение
00             -          10 - string - nickname
10             -          02 - ushort - port
12             -    len - 1a - string - ip / addr

-- Диалог клиентов
Установка соединения (к1-к2):
CONNECT nickname1

Подтверждение (к2-к1):
ACCEPT nickname1

Отказ (к2-к1):
REJECT nickname1

Отключение (к-к):
QUIT nickname

Сообщение (к-к):
MESSAGE message text of length len

Порядок сообщений: CONNECT - ACCEPT - MESSAGE - ... - QUIT
                   CONNECT - REJECT

Любые отклонения от порядка сообщений приводят к разрыву TCP-соединения.

---- Внутреннее построение
--- Сервер
Функционально сервер состоит из следующих блоков:
    = приемник (receiver) --- таковых два: для первого и второго каналов
    = сторож (watchdog)
    = связь с БД, или просто --- БД

Задачи приемника:
    = диалог с клиентом:
        = ожидание подключений от новых клиентов по первому каналу
        = ожидание оповещений по второму каналу

Задачи сторожа:
    = отключение ``просроченных'' клиентов:
        = выстраивание имеющихся клиентов в очередь на отключение

Сторож и приемник тесно взаимодействуют:
    = приемник оповещает сторожа о:
         = добавлении клиента (по подключению)
         = обновлении (по получению уведомления)
         = удалении клиента (по получению уведомления об отключении)
    = сторож оповещает приемник об отключении клиента

С БД диалог ведет только приемник.

-- Приемник
Приемник состоит из двух частей:
    = TCP сервер
    = UDP клиент

Также приемник содержит справочник подключенных клиентов.
Справочник --- ассоциативный. Ключ --- строковое представление
удаленной точки подключения клиента (или хеш-сумма).
Значение --- оптисывающая клиента структура.

-- Сторож
Сторож реализует очередь посредством АВЛ-дерева. Ключем выступает
момент времени, когда нужно будет отключить клиента. В роли значения
выступает удаленная точка подключения клиента (или хеш-сумма таковой).

--- Клиент

----------

Возможно, потребуется использовать NAT traversal:
STUN, TURN,
https://en.wikipedia.org/wiki/NAT_traversal
https://tools.ietf.org/html/rfc3235
